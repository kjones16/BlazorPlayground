// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoBlazor.Shared
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TodoAPI.
    /// </summary>
    public static partial class TodoAPIExtensions
    {
            /// <summary>
            /// Get a single todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item
            /// </param>
            public static TodoItem GetTodoItem(this ITodoAPI operations, long id)
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).GetTodoItemAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoItem> GetTodoItemAsync(this ITodoAPI operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodoItemWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item to update.
            /// </param>
            /// <param name='value'>
            /// The updated values to apply to the todo item.
            /// </param>
            public static void UpdateTodoItem(this ITodoAPI operations, long id, TodoItemUpdate value = default(TodoItemUpdate))
            {
                Task.Factory.StartNew(s => ((ITodoAPI)s).UpdateTodoItemAsync(id, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item to update.
            /// </param>
            /// <param name='value'>
            /// The updated values to apply to the todo item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateTodoItemAsync(this ITodoAPI operations, long id, TodoItemUpdate value = default(TodoItemUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateTodoItemWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes a todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item to delete.
            /// </param>
            public static void DeleteTodoItem(this ITodoAPI operations, long id)
            {
                Task.Factory.StartNew(s => ((ITodoAPI)s).DeleteTodoItemAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a todo item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo item to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTodoItemAsync(this ITodoAPI operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteTodoItemWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets all the todo items in a list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the list to get todo items for
            /// </param>
            public static IList<TodoItem> GetTodoItems(this ITodoAPI operations, long listId)
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).GetTodoItemsAsync(listId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the todo items in a list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the list to get todo items for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TodoItem>> GetTodoItemsAsync(this ITodoAPI operations, long listId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodoItemsWithHttpMessagesAsync(listId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates and adds a todo item to a todo list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id to the todo list to add to.
            /// </param>
            /// <param name='value'>
            /// The values for the new todo item
            /// </param>
            public static TodoItemUpdate CreateTodoItem(this ITodoAPI operations, long listId, TodoItemCreate value = default(TodoItemCreate))
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).CreateTodoItemAsync(listId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates and adds a todo item to a todo list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id to the todo list to add to.
            /// </param>
            /// <param name='value'>
            /// The values for the new todo item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoItemUpdate> CreateTodoItemAsync(this ITodoAPI operations, long listId, TodoItemCreate value = default(TodoItemCreate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTodoItemWithHttpMessagesAsync(listId, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks all the todo items in a todo list to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the todo list.
            /// </param>
            public static void MarkAllComplete(this ITodoAPI operations, long listId)
            {
                Task.Factory.StartNew(s => ((ITodoAPI)s).MarkAllCompleteAsync(listId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks all the todo items in a todo list to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the todo list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MarkAllCompleteAsync(this ITodoAPI operations, long listId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.MarkAllCompleteWithHttpMessagesAsync(listId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets a todo list entry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo list.
            /// </param>
            public static TodoList GetTodoList(this ITodoAPI operations, long id)
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).GetTodoListAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a todo list entry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoList> GetTodoListAsync(this ITodoAPI operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodoListWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a todo list and all of it's todo items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo list.
            /// </param>
            public static TodoList DeleteTodoList(this ITodoAPI operations, long id)
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).DeleteTodoListAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a todo list and all of it's todo items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the todo list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoList> DeleteTodoListAsync(this ITodoAPI operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTodoListWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the todo lists in a project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project.
            /// </param>
            public static IList<TodoList> GetTodoLists(this ITodoAPI operations, long projectId)
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).GetTodoListsAsync(projectId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the todo lists in a project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TodoList>> GetTodoListsAsync(this ITodoAPI operations, long projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodoListsWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new todo list in a given project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project to add the list to.
            /// </param>
            /// <param name='value'>
            /// The new todo list.
            /// </param>
            public static TodoListCreate CreateTodoList(this ITodoAPI operations, long projectId, TodoListCreate value = default(TodoListCreate))
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).CreateTodoListAsync(projectId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new todo list in a given project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// The id of the project to add the list to.
            /// </param>
            /// <param name='value'>
            /// The new todo list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoListCreate> CreateTodoListAsync(this ITodoAPI operations, long projectId, TodoListCreate value = default(TodoListCreate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTodoListWithHttpMessagesAsync(projectId, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing todo list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the list to update.
            /// </param>
            /// <param name='value'>
            /// The updated list values
            /// </param>
            public static TodoList UpdateTodoList(this ITodoAPI operations, long listId, TodoListUpdate value = default(TodoListUpdate))
            {
                return Task.Factory.StartNew(s => ((ITodoAPI)s).UpdateTodoListAsync(listId, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing todo list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// The id of the list to update.
            /// </param>
            /// <param name='value'>
            /// The updated list values
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoList> UpdateTodoListAsync(this ITodoAPI operations, long listId, TodoListUpdate value = default(TodoListUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTodoListWithHttpMessagesAsync(listId, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
